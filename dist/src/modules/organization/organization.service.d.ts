import { Prisma } from '@prisma/client';
import { PrismaService } from 'src/prisma.service';
import { CreateOrganizationDto } from './dto/create-organization.dto';
import { OrganizationFiltersDto } from './dto/organization-filters.dto';
import { OrganizationMetaDataDto } from './dto/organization-meta.dto';
import { OrganizationPaginationDto } from './dto/organization-pagination.dto';
import { OrganizationSortingDto } from './dto/organization-sorting.dto';
import { UpdateOrganizationDto } from './dto/update-organization.dto';
import { AuthenticatedUser } from 'src/authentication/jwt-payload';
export declare class OrganizationService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(createOrganizationDto: CreateOrganizationDto, user: AuthenticatedUser): Promise<{
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }>;
    findAll(pagination: OrganizationPaginationDto, sorting: OrganizationSortingDto, condition: Prisma.OrganizationWhereInput, meta: OrganizationMetaDataDto): Prisma.PrismaPromise<({
        Country: {
            name: string;
            isoCode: string;
            displayName: string;
        };
        WorkingHours: {
            id: number;
            title: string;
            hours: Prisma.JsonValue;
            addedDate: Date;
        };
    } & {
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    })[]>;
    findAllPublished(pagination: OrganizationPaginationDto, sorting: OrganizationSortingDto, condition: Prisma.OrganizationWhereInput): Prisma.PrismaPromise<{
        id: number;
        name: string;
        phoneCode: string;
        email: string;
        uuid: string;
        phone: string;
        whatsapp: string;
        address: string;
        logo: string;
    }[]>;
    findOne(id: number): Promise<{
        WorkingHours: {
            id: number;
            title: string;
            hours: Prisma.JsonValue;
            addedDate: Date;
        };
    } & {
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }>;
    findOneByUUID(uuid: string): Promise<{
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }>;
    update(id: number, updateOrganizationDto: UpdateOrganizationDto): Promise<{
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }>;
    remove(id: number, userId: number): Promise<{
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }>;
    applyFilters(filters: OrganizationFiltersDto): Prisma.OrganizationWhereInput;
    countTotalRecord(filters: Prisma.OrganizationWhereInput): Prisma.PrismaPromise<number>;
    publishOrganization(organizationId: number): Prisma.Prisma__OrganizationClient<{
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
    suspendOrganization(organizationId: number): Prisma.Prisma__OrganizationClient<{
        id: number;
        uuid: string;
        name: string;
        description: string;
        email: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        address: string;
        locationMap: string;
        logo: string;
        countryId: number;
        city: string;
        status: number;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        isDeleted: boolean;
        isPublished: boolean;
        type: number;
        addedById: number;
        deletedById: number;
        modifiedById: number;
        parentId: number;
        taxRegistrationNumber: string;
        bankAccountHolderName: string;
        bankAccountNumber: string;
        bankIBAN: string;
        bankName: string;
        bankSwiftCode: string;
        organizationCode: string;
        workingHoursId: number;
        digitalStamp: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
    createOrganizationAvatar(organizationId: number, meta?: {
        organizationName: string;
        shouldFetch: boolean;
    }): Promise<string | false>;
}
