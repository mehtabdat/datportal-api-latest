import { Prisma } from '@prisma/client';
import { PrismaService } from 'src/prisma.service';
import { CreateSmDto } from './dto/create-sm.dto';
import { SMSLogsFiltersDto } from './dto/sms-logs-filters.dto';
import { SMSLogsPaginationDto } from './dto/sms-logs-pagination.dto';
import { SMSLogsSortingDto } from './dto/sms-logs-sorting.dto';
import { UpdateSmDto } from './dto/update-sm.dto';
import { SMSData } from './types/send-sms.type';
export declare class SmsService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(createSmDto: CreateSmDto): Promise<{
        id: number;
        slug: string;
        title: string;
        gateway: string;
        appId: string;
        appPassword: string;
        senderId: string;
        senderIdType: import(".prisma/client").$Enums.SMSType;
        test: boolean;
        priority: number;
        isDefault: boolean;
        isPublished: boolean;
        isDeleted: boolean;
        countryId: number;
        addedDate: Date;
        addedById: number;
    }>;
    findAll(): Prisma.PrismaPromise<{
        id: number;
        slug: string;
        title: string;
        gateway: string;
        appId: string;
        appPassword: string;
        senderId: string;
        senderIdType: import(".prisma/client").$Enums.SMSType;
        test: boolean;
        priority: number;
        isDefault: boolean;
        isPublished: boolean;
        isDeleted: boolean;
        countryId: number;
        addedDate: Date;
        addedById: number;
    }[]>;
    findOne(id: number): Promise<{
        id: number;
        slug: string;
        title: string;
        gateway: string;
        appId: string;
        appPassword: string;
        senderId: string;
        senderIdType: import(".prisma/client").$Enums.SMSType;
        test: boolean;
        priority: number;
        isDefault: boolean;
        isPublished: boolean;
        isDeleted: boolean;
        countryId: number;
        addedDate: Date;
        addedById: number;
    }>;
    update(id: number, updateSmDto: UpdateSmDto): Promise<{
        id: number;
        slug: string;
        title: string;
        gateway: string;
        appId: string;
        appPassword: string;
        senderId: string;
        senderIdType: import(".prisma/client").$Enums.SMSType;
        test: boolean;
        priority: number;
        isDefault: boolean;
        isPublished: boolean;
        isDeleted: boolean;
        countryId: number;
        addedDate: Date;
        addedById: number;
    }>;
    remove(id: number): Promise<{
        id: number;
        slug: string;
        title: string;
        gateway: string;
        appId: string;
        appPassword: string;
        senderId: string;
        senderIdType: import(".prisma/client").$Enums.SMSType;
        test: boolean;
        priority: number;
        isDefault: boolean;
        isPublished: boolean;
        isDeleted: boolean;
        countryId: number;
        addedDate: Date;
        addedById: number;
    }>;
    makeDefault(id: number): Promise<{
        id: number;
        slug: string;
        title: string;
        gateway: string;
        appId: string;
        appPassword: string;
        senderId: string;
        senderIdType: import(".prisma/client").$Enums.SMSType;
        test: boolean;
        priority: number;
        isDefault: boolean;
        isPublished: boolean;
        isDeleted: boolean;
        countryId: number;
        addedDate: Date;
        addedById: number;
    }>;
    sendSms(smsData: SMSData): Promise<void>;
    logSms(smsData: SMSData): Promise<void>;
    sendSMSUsingSMSAlaGateway(smsData: SMSData): void;
    sendSMSUsingCountrySMSgateway(smsData: SMSData): void;
    findSmsLogs(pagination: SMSLogsPaginationDto, sorting: SMSLogsSortingDto, condition: Prisma.SmsLogsWhereInput): Prisma.PrismaPromise<{
        id: number;
        uuid: string;
        gateway: string;
        number: string;
        message: string;
        status: string;
        remarks: string;
        error: string;
        transactionId: string;
        referenceId: string;
        sentDate: Date;
        userId: number;
    }[]>;
    applyFilters(filters: SMSLogsFiltersDto): Prisma.SmsLogsWhereInput;
    countTotalRecord(condition: Prisma.SmsLogsWhereInput): Prisma.PrismaPromise<number>;
}
