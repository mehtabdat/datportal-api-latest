/// <reference types="multer" />
import { ProjectService } from './project.service';
import { CreateProjectDto } from './dto/create-project.dto';
import { UpdateProjectDto } from './dto/update-project.dto';
import { FindBySlugDto, Pagination, ParamsDto, ResponseError, ResponseSuccess } from 'src/common-types/common-types';
import { ProjectFiltersDto } from './dto/project-filters.dto';
import { UploadProjectFiles } from './dto/upload-files.dto';
import { AuthenticatedRequest } from 'src/authentication/authenticated-request';
import { RemoveProjectClient, RemoveProjectMember } from './dto/remove-project-member.dto';
import { UpdateProjectMember } from './dto/update-project-member.dto';
import { UpdateProjectStatus } from './dto/update-project-status.dto';
import { ProjectResourcesFiltersDto } from './dto/project-resouces-filters.dto';
import { CreateProjectNoteDto } from './dto/create-project-note.dto';
import { HoldProjectDto, UnholdProjectDto } from './dto/hold-project.dto';
import { UpdateProjectFiles } from './dto/update-files.dto';
import { ProjectAuthorizationService } from './project.authorization.service';
import { ProjectNotePaginationDto } from './dto/project-note.pagination.dto';
import { ProjectChatFiltersDto } from './dto/project-chat-filters.dto';
import { ShareFilesToClient } from './dto/share-files-to-client.dto';
import { CreateProjectEnableStateDto } from './dto/create-project-enable-state.dto';
export declare class ProjectController {
    private readonly projectService;
    private readonly authorizationService;
    constructor(projectService: ProjectService, authorizationService: ProjectAuthorizationService);
    uploadPropertyFiles(uploadPropertyFiles: UploadProjectFiles, files: Array<Express.Multer.File>, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    uploadConversationFiles(params: ParamsDto, files: Array<Express.Multer.File>, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    create(createDto: CreateProjectDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    findBySlug(findBySlugDto: FindBySlugDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    findAll(filters: ProjectFiltersDto, req: AuthenticatedRequest, pagination: Pagination): Promise<ResponseSuccess | ResponseError>;
    getProjectForConversation(filters: ProjectChatFiltersDto, req: AuthenticatedRequest, pagination: Pagination): Promise<ResponseSuccess | ResponseError>;
    findProjectList(filters: ProjectFiltersDto, req: AuthenticatedRequest, pagination: Pagination): Promise<ResponseSuccess | ResponseError>;
    findOne(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    findMany(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    shareFiles(shareFiles: ShareFilesToClient, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    sharedFiles(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    update(params: ParamsDto, updateDto: UpdateProjectDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    updateFiles(params: ParamsDto, updateDto: UpdateProjectFiles, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    holdProject(params: ParamsDto, updateDto: HoldProjectDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    unholdProject(params: ParamsDto, updateDto: UnholdProjectDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    removeProjectMembers(params: RemoveProjectMember, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    removeProjectClient(params: RemoveProjectClient, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    removeProjectFiles(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    updateProjectMembers(updateProjectMember: UpdateProjectMember, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    updateProjectStatus(updateProjectStatus: UpdateProjectStatus, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    addProjectStates(params: ParamsDto, CreateProjectEnableStateDto: CreateProjectEnableStateDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    removeProjectStates(params: ParamsDto, CreateProjectEnableStateDto: CreateProjectEnableStateDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    findProjectFiles(filters: ProjectResourcesFiltersDto, req: AuthenticatedRequest, pagination: Pagination): Promise<ResponseSuccess | ResponseError>;
    findProjectNotes(filters: ProjectResourcesFiltersDto, req: AuthenticatedRequest, pagination: ProjectNotePaginationDto): Promise<ResponseSuccess | ResponseError>;
    createProjectNote(createDto: CreateProjectNoteDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    removeProjectNote(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    removeNoteMedia(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
    remove(params: ParamsDto, req: AuthenticatedRequest): Promise<ResponseSuccess | ResponseError>;
}
