import { Prisma } from '@prisma/client';
import { PrismaService } from 'src/prisma.service';
import { SavedSearchesFiltersDto } from './dto/saved-searches-filters.dto';
import { SavedSearchesPaginationDto } from './dto/saved-searches-pagination.dto';
import { SavedSearchesSortingDto } from './dto/saved-searches-sorting.dto';
import { CreateSavedSearchDto } from './dto/create-saved-search.dto';
import { AuthenticatedUser } from 'src/authentication/jwt-payload';
import { CreateAdminSavedSearchDto } from './dto/create-saved-search-admin.dto';
import { SavedSearchesAdminFiltersDto } from './dto/saved-searches-admin-filters.dto';
export declare class SavedSearchesService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(createSavedSearchDto: CreateSavedSearchDto): Promise<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }>;
    createAdminpanelFilters(createSavedSearchDto: CreateAdminSavedSearchDto, user: AuthenticatedUser): Promise<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }>;
    findAll(filters: Prisma.SavedSearchesWhereInput, pagination: SavedSearchesPaginationDto, sorting: SavedSearchesSortingDto): Prisma.PrismaPromise<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }[]>;
    checkIfRecordExists(filters: Prisma.SavedSearchesWhereInput): Prisma.Prisma__SavedSearchesClient<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    findOne(id: number, user: AuthenticatedUser): Promise<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }>;
    findOneById(id: number): Promise<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }>;
    remove(id: number): Promise<{
        id: number;
        title: string;
        userId: number;
        filters: Prisma.JsonValue;
        icon: string;
        forAdminpanel: boolean;
        visibility: import(".prisma/client").$Enums.SavedSearchesVisibility;
        organizationId: number;
        isPrivate: boolean;
        addedDate: Date;
        modifiedDate: Date;
        isPublished: boolean;
        isDeleted: boolean;
    }>;
    removeSavedSearches(id: number, userId: number): Promise<Prisma.BatchPayload>;
    removeAllSavedSearches(userId: number, adminpanel: boolean): Promise<Prisma.BatchPayload>;
    applyFilters(filters: SavedSearchesFiltersDto): Prisma.SavedSearchesWhereInput;
    applyAdminFilters(filters: SavedSearchesAdminFiltersDto): Prisma.SavedSearchesWhereInput;
    countSavedSearches(filters: Prisma.SavedSearchesWhereInput): Prisma.PrismaPromise<number>;
}
