import { Prisma } from '@prisma/client';
import { Pagination } from 'src/common-types/common-types';
import { PrismaService } from 'src/prisma.service';
import { ClientFiltersDto } from './dto/client-filters.dto';
import { CreateClientDto } from './dto/create-client.dto';
import { UpdateClientDto } from './dto/update-client.dto';
import { Queue } from 'bull';
export declare class ClientService {
    private prisma;
    private xeroQueue;
    private readonly logger;
    constructor(prisma: PrismaService, xeroQueue: Queue);
    create(createDto: CreateClientDto): Promise<{
        id: number;
        uuid: string;
        name: string;
        type: number;
        designation: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        email: string;
        address: string;
        companyId: number;
        addedById: number;
        addedDate: Date;
        deletedById: number;
        deletedDate: Date;
        isDeleted: boolean;
        modifiedById: number;
        modifiedDate: Date;
        taxRegistrationNumber: string;
    }>;
    findAll(filters: Prisma.ClientWhereInput, pagination: Pagination): Prisma.PrismaPromise<{
        id: number;
        uuid: string;
        name: string;
        type: number;
        designation: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        email: string;
        address: string;
        companyId: number;
        addedById: number;
        addedDate: Date;
        deletedById: number;
        deletedDate: Date;
        isDeleted: boolean;
        modifiedById: number;
        modifiedDate: Date;
        taxRegistrationNumber: string;
    }[]>;
    findAllPublished(filters: Prisma.ClientWhereInput, pagination: Pagination): Prisma.PrismaPromise<{
        id: number;
        uuid: string;
        name: string;
        type: number;
        designation: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        email: string;
        address: string;
        companyId: number;
        addedById: number;
        addedDate: Date;
        deletedById: number;
        deletedDate: Date;
        isDeleted: boolean;
        modifiedById: number;
        modifiedDate: Date;
        taxRegistrationNumber: string;
    }[]>;
    findOne(id: number): Promise<{
        id: number;
        uuid: string;
        name: string;
        type: number;
        designation: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        email: string;
        address: string;
        companyId: number;
        addedById: number;
        addedDate: Date;
        deletedById: number;
        deletedDate: Date;
        isDeleted: boolean;
        modifiedById: number;
        modifiedDate: Date;
        taxRegistrationNumber: string;
    }>;
    update(id: number, updateDto: UpdateClientDto): Promise<{
        ClientXeroConnection: {
            clientId: number;
            xeroTenantId: string;
            xeroReference: string;
        }[];
    } & {
        id: number;
        uuid: string;
        name: string;
        type: number;
        designation: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        email: string;
        address: string;
        companyId: number;
        addedById: number;
        addedDate: Date;
        deletedById: number;
        deletedDate: Date;
        isDeleted: boolean;
        modifiedById: number;
        modifiedDate: Date;
        taxRegistrationNumber: string;
    }>;
    remove(id: number): Promise<{
        ClientXeroConnection: {
            clientId: number;
            xeroTenantId: string;
            xeroReference: string;
        }[];
    } & {
        id: number;
        uuid: string;
        name: string;
        type: number;
        designation: string;
        phone: string;
        phoneCode: string;
        whatsapp: string;
        email: string;
        address: string;
        companyId: number;
        addedById: number;
        addedDate: Date;
        deletedById: number;
        deletedDate: Date;
        isDeleted: boolean;
        modifiedById: number;
        modifiedDate: Date;
        taxRegistrationNumber: string;
    }>;
    applyFilters(filters: ClientFiltersDto): Prisma.ClientWhereInput;
    countRecords(filters: Prisma.ClientWhereInput): Prisma.PrismaPromise<number>;
}
