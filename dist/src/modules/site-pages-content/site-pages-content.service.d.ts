import { Prisma } from '@prisma/client';
import { PrismaService } from 'src/prisma.service';
import { CreateSitePagesContentDto } from './dto/create-site-pages-content.dto';
import { UpdateSitePagesContentDto } from './dto/update-site-pages-content.dto';
export declare class SitePagesContentService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(createSitePagesContentDto: CreateSitePagesContentDto): Promise<{
        id: number;
        pageSectionId: number;
        image: string;
        imageAlt: string;
        isDefault: number;
        addedDate: Date;
        addedById: number;
        modifiedDate: Date;
        modifiedById: number;
        isPublished: boolean;
        isDeleted: boolean;
        title: string;
        highlight: string;
        description: string;
    }>;
    findAll(): Prisma.PrismaPromise<{
        id: number;
        pageSectionId: number;
        image: string;
        imageAlt: string;
        isDefault: number;
        addedDate: Date;
        addedById: number;
        modifiedDate: Date;
        modifiedById: number;
        isPublished: boolean;
        isDeleted: boolean;
        title: string;
        highlight: string;
        description: string;
    }[]>;
    findAllByPageSection(sectionId: number): Prisma.Prisma__PagesSectionClient<{
        PagesContent: {
            id: number;
            pageSectionId: number;
            image: string;
            imageAlt: string;
            isDefault: number;
            addedDate: Date;
            addedById: number;
            modifiedDate: Date;
            modifiedById: number;
            isPublished: boolean;
            isDeleted: boolean;
            title: string;
            highlight: string;
            description: string;
        }[];
    } & {
        id: number;
        slug: string;
        title: string;
        description: string;
        hasMultipleItems: boolean;
        isPublished: boolean;
        isDeleted: boolean;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    findOne(id: number): Promise<{
        id: number;
        pageSectionId: number;
        image: string;
        imageAlt: string;
        isDefault: number;
        addedDate: Date;
        addedById: number;
        modifiedDate: Date;
        modifiedById: number;
        isPublished: boolean;
        isDeleted: boolean;
        title: string;
        highlight: string;
        description: string;
    }>;
    update(id: number, updateSitePagesContentDto: UpdateSitePagesContentDto): Promise<{
        id: number;
        pageSectionId: number;
        image: string;
        imageAlt: string;
        isDefault: number;
        addedDate: Date;
        addedById: number;
        modifiedDate: Date;
        modifiedById: number;
        isPublished: boolean;
        isDeleted: boolean;
        title: string;
        highlight: string;
        description: string;
    }>;
    getSectionData(sectionId: number): Prisma.Prisma__PagesSectionClient<{
        id: number;
        slug: string;
        title: string;
        description: string;
        hasMultipleItems: boolean;
        isPublished: boolean;
        isDeleted: boolean;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    checkIfSectionHasContentForCountry(sectionId: number): Prisma.Prisma__PagesContentClient<{
        id: number;
        pageSectionId: number;
        image: string;
        imageAlt: string;
        isDefault: number;
        addedDate: Date;
        addedById: number;
        modifiedDate: Date;
        modifiedById: number;
        isPublished: boolean;
        isDeleted: boolean;
        title: string;
        highlight: string;
        description: string;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    remove(id: number): Promise<{
        id: number;
        pageSectionId: number;
        image: string;
        imageAlt: string;
        isDefault: number;
        addedDate: Date;
        addedById: number;
        modifiedDate: Date;
        modifiedById: number;
        isPublished: boolean;
        isDeleted: boolean;
        title: string;
        highlight: string;
        description: string;
    }>;
}
