/// <reference types="multer" />
import { Prisma } from '@prisma/client';
import { AuthenticatedUser } from 'src/authentication/jwt-payload';
import { SEOData } from 'src/common-types/common-types';
import { BlogsStatus } from 'src/config/constants';
import { PrismaService } from 'src/prisma.service';
import { BlogsFiltersDto, BlogsPublicFiltersDto } from './dto/blogs-filter.dto';
import { BlogsPaginationDto } from './dto/blogs-pagination.dto';
import { BlogsSortingDto } from './dto/blogs-sorting.dto';
import { CreateBlogDto } from './dto/create-blog.dto';
import { UpdateBlogDto } from './dto/update-blog.dto';
import { UploadBlogImage } from './dto/upload-image.dto';
export declare class BlogsService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(createBlogDto: CreateBlogDto): Promise<{
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }>;
    findAll(filters: Prisma.BlogsWhereInput, pagination: BlogsPaginationDto, sorting: BlogsSortingDto): Prisma.PrismaPromise<({
        BlogCategory: {
            id: number;
            title: string;
            slug: string;
            highlight: string;
        };
    } & {
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    })[]>;
    findAllPublished(filters: Prisma.BlogsWhereInput, pagination: BlogsPaginationDto, sorting: BlogsSortingDto): Prisma.PrismaPromise<{
        addedDate: Date;
        title: string;
        slug: string;
        category: number;
        image: string;
        imageAlt: string;
        highlight: string;
        BlogCategory: {
            title: string;
            slug: string;
            highlight: string;
        };
    }[]>;
    findOne(id: number): Promise<{
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }>;
    findOneBySlug(slug: string): Promise<{
        BlogCategory: {
            title: string;
            slug: string;
            description: string;
            highlight: string;
        };
    } & {
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }>;
    update(id: number, updateBlogDto: UpdateBlogDto): Promise<{
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }>;
    updateStatus(blogId: number, status: BlogsStatus): Prisma.Prisma__BlogsClient<{
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
    remove(id: number, userId: number): Promise<{
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }>;
    applyAdminFilters(filters: BlogsFiltersDto): Prisma.BlogsWhereInput;
    applyPublicFilters(filters: BlogsPublicFiltersDto): Prisma.BlogsWhereInput;
    countBlogs(filters: Prisma.BlogsWhereInput): Prisma.PrismaPromise<number>;
    updateSEOData(blogId: number, seoData: SEOData): Prisma.Prisma__BlogsClient<{
        id: number;
        blogCategoryId: number;
        category: number;
        slug: string;
        status: number;
        seoTitle: string;
        seoDescription: string;
        image: string;
        imageAlt: string;
        isDeleted: boolean;
        addedDate: Date;
        modifiedDate: Date;
        deletedDate: Date;
        addedById: number;
        modifiedById: number;
        deletedById: number;
        title: string;
        highlight: string;
        description: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
    handleBlogImages(uploadPropertyImage: UploadBlogImage, files: Array<Express.Multer.File>, user: AuthenticatedUser): Promise<{}>;
    removeFiles(id: number, user: AuthenticatedUser): Promise<Prisma.BatchPayload>;
    getBlogImages(blogId: number): Prisma.PrismaPromise<{
        id: number;
        title: string;
        file: string;
        path: string;
        fileType: string;
    }[]>;
    checkImagesThreshold(blogId: number): Promise<void>;
}
