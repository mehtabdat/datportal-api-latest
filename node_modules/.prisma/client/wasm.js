
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.18.0
 * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
 */
Prisma.prismaVersion = {
  client: "5.18.0",
  engine: "4c784e32044a8a016d99474bd02a3b6123742169"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isoCode: 'isoCode',
  vat: 'vat',
  shortName: 'shortName',
  displayName: 'displayName',
  phoneCode: 'phoneCode',
  flag: 'flag',
  status: 'status',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  isDeleted: 'isDeleted',
  isPublished: 'isPublished',
  addedById: 'addedById',
  deletedById: 'deletedById',
  modifiedById: 'modifiedById',
  level: 'level'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  phoneCode: 'phoneCode',
  whatsapp: 'whatsapp',
  address: 'address',
  locationMap: 'locationMap',
  logo: 'logo',
  countryId: 'countryId',
  city: 'city',
  status: 'status',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  isDeleted: 'isDeleted',
  isPublished: 'isPublished',
  type: 'type',
  addedById: 'addedById',
  deletedById: 'deletedById',
  modifiedById: 'modifiedById',
  parentId: 'parentId',
  taxRegistrationNumber: 'taxRegistrationNumber',
  bankAccountHolderName: 'bankAccountHolderName',
  bankAccountNumber: 'bankAccountNumber',
  bankIBAN: 'bankIBAN',
  bankName: 'bankName',
  bankSwiftCode: 'bankSwiftCode',
  organizationCode: 'organizationCode',
  workingHoursId: 'workingHoursId',
  digitalStamp: 'digitalStamp'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  type: 'type',
  designation: 'designation',
  phone: 'phone',
  phoneCode: 'phoneCode',
  whatsapp: 'whatsapp',
  email: 'email',
  address: 'address',
  companyId: 'companyId',
  addedById: 'addedById',
  addedDate: 'addedDate',
  deletedById: 'deletedById',
  deletedDate: 'deletedDate',
  isDeleted: 'isDeleted',
  modifiedById: 'modifiedById',
  modifiedDate: 'modifiedDate',
  taxRegistrationNumber: 'taxRegistrationNumber'
};

exports.Prisma.ClientXeroConnectionScalarFieldEnum = {
  clientId: 'clientId',
  xeroTenantId: 'xeroTenantId',
  xeroReference: 'xeroReference'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  phoneCode: 'phoneCode',
  whatsapp: 'whatsapp',
  email: 'email',
  address: 'address',
  preferences: 'preferences',
  phoneVerified: 'phoneVerified',
  emailVerified: 'emailVerified',
  password: 'password',
  profile: 'profile',
  isAvatar: 'isAvatar',
  resetToken: 'resetToken',
  resetTokenValidity: 'resetTokenValidity',
  status: 'status',
  userSignupSource: 'userSignupSource',
  userSignupDeviceAgent: 'userSignupDeviceAgent',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  isDeleted: 'isDeleted',
  isPublished: 'isPublished',
  organizationId: 'organizationId',
  departmentId: 'departmentId',
  managerId: 'managerId',
  addedById: 'addedById',
  deletedById: 'deletedById',
  modifiedById: 'modifiedById',
  designation: 'designation',
  dateOfJoining: 'dateOfJoining',
  lastWorkingDate: 'lastWorkingDate',
  remainingAnnualLeaves: 'remainingAnnualLeaves',
  enableRemoteCheckin: 'enableRemoteCheckin',
  dataAccessRestrictedTo: 'dataAccessRestrictedTo'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId'
};

exports.Prisma.UserMetaScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  userId: 'userId'
};

exports.Prisma.UserDocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  file: 'file',
  documentType: 'documentType',
  mimeType: 'mimeType',
  addedDate: 'addedDate',
  userId: 'userId',
  addedById: 'addedById',
  isDeleted: 'isDeleted'
};

exports.Prisma.AuthTokensScalarFieldEnum = {
  id: 'id',
  tokenType: 'tokenType',
  token: 'token',
  userId: 'userId',
  userAgent: 'userAgent',
  userIP: 'userIP',
  status: 'status',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate'
};

exports.Prisma.ModulesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  icon: 'icon',
  isMenuItem: 'isMenuItem',
  visibility: 'visibility',
  order: 'order',
  url: 'url',
  description: 'description'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  action: 'action',
  icon: 'icon',
  moduleId: 'moduleId',
  visibility: 'visibility',
  condition: 'condition',
  url: 'url',
  isMenuItem: 'isMenuItem',
  order: 'order',
  description: 'description'
};

exports.Prisma.RolePermissionsScalarFieldEnum = {
  id: 'id',
  addedDate: 'addedDate',
  roleId: 'roleId',
  permissionsId: 'permissionsId',
  addedById: 'addedById'
};

exports.Prisma.StaticPageSEOScalarFieldEnum = {
  id: 'id',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  image: 'image',
  isDefault: 'isDefault',
  sitePageId: 'sitePageId',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  modifiedById: 'modifiedById'
};

exports.Prisma.SystemLogsScalarFieldEnum = {
  id: 'id',
  table: 'table',
  tableColumnKey: 'tableColumnKey',
  tableColumnValue: 'tableColumnValue',
  valueType: 'valueType',
  actionType: 'actionType',
  message: 'message',
  endPoint: 'endPoint',
  controllerName: 'controllerName',
  data: 'data',
  addedDate: 'addedDate',
  addedById: 'addedById'
};

exports.Prisma.FaqsCategoryScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  parentId: 'parentId',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  forAdminpanel: 'forAdminpanel',
  title: 'title',
  description: 'description'
};

exports.Prisma.FaqsScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  faqsCategoryId: 'faqsCategoryId',
  forAdminpanel: 'forAdminpanel',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  title: 'title',
  description: 'description'
};

exports.Prisma.FaqsMediaScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  file: 'file',
  fileType: 'fileType',
  videoPreview: 'videoPreview',
  path: 'path',
  faqId: 'faqId',
  isDeleted: 'isDeleted',
  isPublished: 'isPublished'
};

exports.Prisma.SitePagesScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted'
};

exports.Prisma.PagesSectionScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  hasMultipleItems: 'hasMultipleItems',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted'
};

exports.Prisma.PageSectionRelationScalarFieldEnum = {
  id: 'id',
  sitePageId: 'sitePageId',
  pageSectionId: 'pageSectionId'
};

exports.Prisma.PagesContentScalarFieldEnum = {
  id: 'id',
  pageSectionId: 'pageSectionId',
  image: 'image',
  imageAlt: 'imageAlt',
  isDefault: 'isDefault',
  addedDate: 'addedDate',
  addedById: 'addedById',
  modifiedDate: 'modifiedDate',
  modifiedById: 'modifiedById',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  title: 'title',
  highlight: 'highlight',
  description: 'description'
};

exports.Prisma.BlogsCategoryScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  highlight: 'highlight',
  description: 'description',
  status: 'status',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  image: 'image',
  imageAlt: 'imageAlt',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  addedById: 'addedById',
  modifiedById: 'modifiedById',
  deletedById: 'deletedById'
};

exports.Prisma.BlogsScalarFieldEnum = {
  id: 'id',
  blogCategoryId: 'blogCategoryId',
  category: 'category',
  slug: 'slug',
  status: 'status',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  image: 'image',
  imageAlt: 'imageAlt',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  addedById: 'addedById',
  modifiedById: 'modifiedById',
  deletedById: 'deletedById',
  title: 'title',
  highlight: 'highlight',
  description: 'description'
};

exports.Prisma.BlogImagesScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  file: 'file',
  fileType: 'fileType',
  videoPreview: 'videoPreview',
  path: 'path',
  blogId: 'blogId',
  isDeleted: 'isDeleted',
  isPublished: 'isPublished'
};

exports.Prisma.MailSentLogsScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  calleFunction: 'calleFunction',
  email: 'email',
  data: 'data',
  template: 'template',
  addedDate: 'addedDate'
};

exports.Prisma.OtpCodesScalarFieldEnum = {
  id: 'id',
  phoneCode: 'phoneCode',
  phone: 'phone',
  email: 'email',
  otp: 'otp',
  status: 'status',
  active: 'active',
  used: 'used',
  addedDate: 'addedDate',
  deviceType: 'deviceType',
  deviceId: 'deviceId',
  deviceVersion: 'deviceVersion',
  userAgent: 'userAgent',
  userIP: 'userIP',
  attempts: 'attempts'
};

exports.Prisma.EmailLookupsLogScalarFieldEnum = {
  id: 'id',
  email: 'email',
  status: 'status',
  userAgent: 'userAgent',
  userIP: 'userIP',
  attempts: 'attempts',
  addedDate: 'addedDate'
};

exports.Prisma.AlertsTypeScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  forAdminpanel: 'forAdminpanel',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate'
};

exports.Prisma.UserAlertsSettingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  alertsTypeId: 'alertsTypeId',
  desktop: 'desktop',
  mobile: 'mobile',
  email: 'email',
  app: 'app',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate'
};

exports.Prisma.SmsConfigurationScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  gateway: 'gateway',
  appId: 'appId',
  appPassword: 'appPassword',
  senderId: 'senderId',
  senderIdType: 'senderIdType',
  test: 'test',
  priority: 'priority',
  isDefault: 'isDefault',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  countryId: 'countryId',
  addedDate: 'addedDate',
  addedById: 'addedById'
};

exports.Prisma.SmsLogsScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  gateway: 'gateway',
  number: 'number',
  message: 'message',
  status: 'status',
  remarks: 'remarks',
  error: 'error',
  transactionId: 'transactionId',
  referenceId: 'referenceId',
  sentDate: 'sentDate',
  userId: 'userId'
};

exports.Prisma.PaymentGatewayScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  gatewayURL: 'gatewayURL',
  gatewayPublicKey: 'gatewayPublicKey',
  gatewayPrivateKey: 'gatewayPrivateKey',
  storeId: 'storeId',
  test: 'test',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  countryId: 'countryId',
  isDefault: 'isDefault',
  addedDate: 'addedDate',
  addedById: 'addedById',
  modifiedDate: 'modifiedDate',
  modifiedById: 'modifiedById',
  deletedDate: 'deletedDate',
  deletedById: 'deletedById'
};

exports.Prisma.SavedSearchesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  userId: 'userId',
  filters: 'filters',
  icon: 'icon',
  forAdminpanel: 'forAdminpanel',
  visibility: 'visibility',
  organizationId: 'organizationId',
  isPrivate: 'isPrivate',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  icon: 'icon',
  message: 'message',
  link: 'link',
  file: 'file',
  departmentId: 'departmentId',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  isActive: 'isActive',
  type: 'type',
  mode: 'mode',
  linkLabel: 'linkLabel'
};

exports.Prisma.SubscribersScalarFieldEnum = {
  userId: 'userId',
  notificationId: 'notificationId',
  modifiedDate: 'modifiedDate',
  read: 'read'
};

exports.Prisma.AuthoritiesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate'
};

exports.Prisma.ProjectComponentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate'
};

exports.Prisma.ProjectTypeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate'
};

exports.Prisma.ProjectStateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  shouldCloseProject: 'shouldCloseProject',
  order: 'order',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  isDefault: 'isDefault',
  bgColor: 'bgColor',
  textColor: 'textColor'
};

exports.Prisma.ProjectEnableStatesScalarFieldEnum = {
  id: 'id',
  pId: 'pId',
  pstateId: 'pstateId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  submissionById: 'submissionById',
  clientId: 'clientId',
  projectTypeId: 'projectTypeId',
  instructions: 'instructions',
  projectFilesLink: 'projectFilesLink',
  priority: 'priority',
  startDate: 'startDate',
  endDate: 'endDate',
  isExtended: 'isExtended',
  reasonOfExtension: 'reasonOfExtension',
  projectStateId: 'projectStateId',
  isDeleted: 'isDeleted',
  isClosed: 'isClosed',
  addedById: 'addedById',
  modifiedById: 'modifiedById',
  deletedById: 'deletedById',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  leadId: 'leadId',
  comment: 'comment',
  onHold: 'onHold',
  referenceNumber: 'referenceNumber',
  projectHoldById: 'projectHoldById',
  xeroReference: 'xeroReference',
  projectEstimate: 'projectEstimate',
  xeroTenantId: 'xeroTenantId'
};

exports.Prisma.ProjectMembersScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  projectRole: 'projectRole'
};

exports.Prisma.ProjectClientScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  projectId: 'projectId',
  isRepresentative: 'isRepresentative'
};

exports.Prisma.FileManagementScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  documentType: 'documentType',
  title: 'title',
  file: 'file',
  fileType: 'fileType',
  name: 'name',
  path: 'path',
  description: 'description',
  order: 'order',
  comments: 'comments',
  visibility: 'visibility',
  projectId: 'projectId',
  taskId: 'taskId',
  isTemp: 'isTemp',
  status: 'status',
  isDeleted: 'isDeleted',
  isDefault: 'isDefault',
  isProcessing: 'isProcessing',
  backgroundId: 'backgroundId',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  deletedDate: 'deletedDate',
  addedById: 'addedById',
  deletedById: 'deletedById',
  modifiedById: 'modifiedById',
  projectConversationId: 'projectConversationId',
  permitId: 'permitId',
  fileSize: 'fileSize'
};

exports.Prisma.FileshareLogsScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  sharedById: 'sharedById',
  addedDate: 'addedDate',
  projectId: 'projectId',
  fileId: 'fileId',
  batchNumber: 'batchNumber'
};

exports.Prisma.ProjectConversationScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  message: 'message',
  userId: 'userId',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate'
};

exports.Prisma.ProjectConversationReadLogScalarFieldEnum = {
  conversationId: 'conversationId',
  userId: 'userId',
  read: 'read'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  priority: 'priority',
  instructions: 'instructions',
  taskStartFrom: 'taskStartFrom',
  taskEndOn: 'taskEndOn',
  hasExtendedDate: 'hasExtendedDate',
  extendedDate: 'extendedDate',
  reasonOfExtension: 'reasonOfExtension',
  addedById: 'addedById',
  closedById: 'closedById',
  status: 'status',
  addedDate: 'addedDate',
  isDeleted: 'isDeleted',
  order: 'order',
  projectId: 'projectId',
  type: 'type'
};

exports.Prisma.TaskMembersScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  taskId: 'taskId'
};

exports.Prisma.DailyRoutineScalarFieldEnum = {
  id: 'id',
  remarks: 'remarks',
  noOfHours: 'noOfHours',
  projectId: 'projectId',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  userId: 'userId',
  taskTypeId: 'taskTypeId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate'
};

exports.Prisma.OrganizationDepartmentRelationScalarFieldEnum = {
  id: 'id',
  departmentId: 'departmentId',
  organizationId: 'organizationId',
  departmentHeadId: 'departmentHeadId'
};

exports.Prisma.EnquiryScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  slug: 'slug',
  email: 'email',
  phone: 'phone',
  phoneCode: 'phoneCode',
  message: 'message',
  source: 'source',
  userAgent: 'userAgent',
  userIP: 'userIP',
  reference: 'reference',
  isDeleted: 'isDeleted',
  status: 'status',
  addedDate: 'addedDate',
  hasReplied: 'hasReplied',
  timeDifference: 'timeDifference',
  repliedDate: 'repliedDate',
  modifiedDate: 'modifiedDate',
  addedById: 'addedById',
  modifiedById: 'modifiedById',
  assignedById: 'assignedById',
  assignedToId: 'assignedToId',
  projectTypeId: 'projectTypeId'
};

exports.Prisma.EnquiryAttachmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  file: 'file',
  mimeType: 'mimeType',
  addedDate: 'addedDate',
  enquiryId: 'enquiryId',
  leadId: 'leadId',
  isDeleted: 'isDeleted',
  fileSize: 'fileSize',
  syncWithProject: 'syncWithProject'
};

exports.Prisma.LeadEnquiryFollowUpScalarFieldEnum = {
  id: 'id',
  note: 'note',
  addedDate: 'addedDate',
  addedById: 'addedById',
  enquiryId: 'enquiryId',
  leadId: 'leadId',
  isDeleted: 'isDeleted',
  isConcern: 'isConcern',
  isResolved: 'isResolved'
};

exports.Prisma.LeadsScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  message: 'message',
  status: 'status',
  addedDate: 'addedDate',
  repliedDate: 'repliedDate',
  modifiedDate: 'modifiedDate',
  modifiedById: 'modifiedById',
  addedById: 'addedById',
  clientId: 'clientId',
  projectTypeId: 'projectTypeId',
  representativeId: 'representativeId',
  enquiryId: 'enquiryId',
  assignedById: 'assignedById',
  assignedToId: 'assignedToId',
  isDeleted: 'isDeleted',
  submissionById: 'submissionById',
  dueDateForSubmissions: 'dueDateForSubmissions',
  xeroTenantId: 'xeroTenantId'
};

exports.Prisma.QuotationScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  scopeOfWork: 'scopeOfWork',
  file: 'file',
  type: 'type',
  status: 'status',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  sentDate: 'sentDate',
  modifiedDate: 'modifiedDate',
  addedById: 'addedById',
  modifiedById: 'modifiedById',
  paymentTerms: 'paymentTerms',
  hasSupervision: 'hasSupervision',
  supervisionMonthlyCharge: 'supervisionMonthlyCharge',
  supervisionPaymentSchedule: 'supervisionPaymentSchedule',
  projectId: 'projectId',
  expiryDate: 'expiryDate',
  revisedQuotationReferenceId: 'revisedQuotationReferenceId',
  revisionCount: 'revisionCount',
  subTotal: 'subTotal',
  total: 'total',
  vatAmount: 'vatAmount',
  xeroReference: 'xeroReference',
  quoteNumber: 'quoteNumber',
  brandingThemeId: 'brandingThemeId',
  issueDate: 'issueDate',
  xeroTenantId: 'xeroTenantId',
  note: 'note'
};

exports.Prisma.QuotationMilestoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  quotationId: 'quotationId',
  status: 'status',
  invoiceId: 'invoiceId',
  completedById: 'completedById',
  amount: 'amount',
  quantity: 'quantity',
  requirePayment: 'requirePayment',
  xeroReference: 'xeroReference',
  accountId: 'accountId',
  productId: 'productId',
  taxAmount: 'taxAmount',
  taxRateId: 'taxRateId'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  projectId: 'projectId',
  vatAmount: 'vatAmount',
  total: 'total',
  status: 'status',
  file: 'file',
  isDeleted: 'isDeleted',
  addedDate: 'addedDate',
  sentDate: 'sentDate',
  modifiedDate: 'modifiedDate',
  addedById: 'addedById',
  modifiedById: 'modifiedById',
  clientId: 'clientId',
  type: 'type',
  hasSupervisionCharge: 'hasSupervisionCharge',
  quotationId: 'quotationId',
  balance: 'balance',
  subTotal: 'subTotal',
  xeroReference: 'xeroReference',
  invoiceNumber: 'invoiceNumber',
  expiryDate: 'expiryDate',
  issueDate: 'issueDate',
  xeroTenantId: 'xeroTenantId'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  amount: 'amount',
  invoiceId: 'invoiceId',
  quantity: 'quantity',
  xeroReference: 'xeroReference',
  accountId: 'accountId',
  productId: 'productId',
  taxAmount: 'taxAmount',
  taxRateId: 'taxRateId'
};

exports.Prisma.InvoiceFollowUpScalarFieldEnum = {
  id: 'id',
  note: 'note',
  isConcern: 'isConcern',
  isResolved: 'isResolved',
  addedDate: 'addedDate',
  addedById: 'addedById',
  invoiceId: 'invoiceId',
  isDeleted: 'isDeleted'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  transactionDate: 'transactionDate',
  status: 'status',
  transactionReference: 'transactionReference',
  addedDate: 'addedDate',
  addedById: 'addedById',
  projectId: 'projectId',
  clientId: 'clientId',
  modifiedById: 'modifiedById',
  modifiedDate: 'modifiedDate',
  remarks: 'remarks',
  title: 'title',
  assignedToId: 'assignedToId',
  authorityId: 'authorityId',
  isDeleted: 'isDeleted',
  receipt: 'receipt',
  invoiceId: 'invoiceId',
  xeroReference: 'xeroReference',
  recordType: 'recordType'
};

exports.Prisma.PermitScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  projectId: 'projectId',
  authorityId: 'authorityId',
  title: 'title',
  remarks: 'remarks',
  financeStatus: 'financeStatus',
  clientStatus: 'clientStatus',
  approvedDate: 'approvedDate',
  expiryDate: 'expiryDate',
  addedDate: 'addedDate',
  modifiedDate: 'modifiedDate',
  isDeleted: 'isDeleted',
  addedById: 'addedById',
  modifiedById: 'modifiedById'
};

exports.Prisma.ReimbursementScalarFieldEnum = {
  id: 'id',
  requestById: 'requestById',
  approvedAmount: 'approvedAmount',
  purpose: 'purpose',
  status: 'status',
  addedDate: 'addedDate',
  claimedAmount: 'claimedAmount',
  isDeleted: 'isDeleted'
};

exports.Prisma.ReimbursementReceiptScalarFieldEnum = {
  id: 'id',
  title: 'title',
  file: 'file',
  claimedAmount: 'claimedAmount',
  approvedAmount: 'approvedAmount',
  status: 'status',
  comment: 'comment',
  addedDate: 'addedDate',
  reimbursementId: 'reimbursementId',
  mimeType: 'mimeType'
};

exports.Prisma.LeaveTypeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  isPaid: 'isPaid',
  threshold: 'threshold',
  thresholdType: 'thresholdType',
  addedDate: 'addedDate',
  isDeleted: 'isDeleted',
  isPublished: 'isPublished'
};

exports.Prisma.LeaveCreditsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  daysCount: 'daysCount',
  note: 'note',
  isDeleted: 'isDeleted',
  entryType: 'entryType',
  addedDate: 'addedDate'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  requestById: 'requestById',
  leaveFrom: 'leaveFrom',
  leaveTo: 'leaveTo',
  status: 'status',
  addedDate: 'addedDate',
  submittedDate: 'submittedDate',
  purpose: 'purpose',
  isPaid: 'isPaid',
  leaveTypeId: 'leaveTypeId',
  totalDays: 'totalDays'
};

exports.Prisma.CashAdvanceRequestScalarFieldEnum = {
  id: 'id',
  requestById: 'requestById',
  requestAmount: 'requestAmount',
  purpose: 'purpose',
  approvedAmount: 'approvedAmount',
  numberOfInstallments: 'numberOfInstallments',
  installmentAmount: 'installmentAmount',
  status: 'status',
  addedDate: 'addedDate',
  submittedDate: 'submittedDate'
};

exports.Prisma.CashAdvanceInstallmentScalarFieldEnum = {
  id: 'id',
  cashAdvanceRequestId: 'cashAdvanceRequestId',
  amount: 'amount',
  isPaid: 'isPaid',
  monthYear: 'monthYear',
  paidDate: 'paidDate'
};

exports.Prisma.CarReservationRequestScalarFieldEnum = {
  id: 'id',
  requestById: 'requestById',
  projectId: 'projectId',
  companyCarId: 'companyCarId',
  status: 'status',
  addedDate: 'addedDate',
  fromDate: 'fromDate',
  purpose: 'purpose',
  toDate: 'toDate'
};

exports.Prisma.CompanyAssetScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  assetName: 'assetName',
  assetDetail: 'assetDetail',
  quantity: 'quantity',
  addedDate: 'addedDate',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted',
  branchId: 'branchId'
};

exports.Prisma.AssetAllocationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  quantity: 'quantity',
  addedDate: 'addedDate',
  companyAssetId: 'companyAssetId',
  label: 'label'
};

exports.Prisma.RequestAttachmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  file: 'file',
  addedDate: 'addedDate',
  leaveRequestId: 'leaveRequestId',
  carReservationRequestId: 'carReservationRequestId',
  cashAdvanceRequestId: 'cashAdvanceRequestId',
  mimeType: 'mimeType'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  departmentId: 'departmentId',
  actionById: 'actionById',
  status: 'status',
  comment: 'comment',
  addedDate: 'addedDate',
  reimbursementId: 'reimbursementId',
  leaveRequestId: 'leaveRequestId',
  carReservationRequestId: 'carReservationRequestId',
  cashAdvanceRequestId: 'cashAdvanceRequestId'
};

exports.Prisma.BulkUploadFormatScalarFieldEnum = {
  id: 'id',
  title: 'title',
  format: 'format',
  sample: 'sample',
  comment: 'comment',
  addedDate: 'addedDate'
};

exports.Prisma.BiometricsJobScalarFieldEnum = {
  id: 'id',
  file: 'file',
  status: 'status',
  isDeleted: 'isDeleted',
  addedById: 'addedById',
  addedDate: 'addedDate',
  comment: 'comment',
  title: 'title',
  backgroundId: 'backgroundId',
  failed: 'failed',
  failedRecord: 'failedRecord',
  failedReport: 'failedReport',
  mimeType: 'mimeType',
  processeStartDate: 'processeStartDate',
  processedDate: 'processedDate',
  processedFile: 'processedFile',
  success: 'success',
  totalRecords: 'totalRecords',
  uploadFormatId: 'uploadFormatId'
};

exports.Prisma.BiometricsChecksScalarFieldEnum = {
  id: 'id',
  addedDate: 'addedDate',
  userId: 'userId',
  mode: 'mode',
  addedById: 'addedById',
  biometricsJobId: 'biometricsJobId',
  checkIn: 'checkIn',
  type: 'type',
  isProcessed: 'isProcessed',
  latitude: 'latitude',
  longitude: 'longitude',
  selfie: 'selfie',
  userAgent: 'userAgent',
  userIP: 'userIP',
  modifiedById: 'modifiedById',
  modifiedDate: 'modifiedDate'
};

exports.Prisma.PublicHolidayScalarFieldEnum = {
  id: 'id',
  title: 'title',
  date: 'date',
  addedById: 'addedById',
  addedDate: 'addedDate'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  totalHours: 'totalHours',
  note: 'note',
  addedDate: 'addedDate',
  type: 'type',
  addedById: 'addedById',
  proRatedDeduction: 'proRatedDeduction',
  staus: 'staus',
  modifiedById: 'modifiedById',
  modifiedDate: 'modifiedDate'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  rating: 'rating',
  comment: 'comment',
  addedById: 'addedById',
  addedDate: 'addedDate'
};

exports.Prisma.FeedbackFilesScalarFieldEnum = {
  id: 'id',
  file: 'file',
  addedDate: 'addedDate',
  feedbackId: 'feedbackId'
};

exports.Prisma.SalaryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  addedDate: 'addedDate'
};

exports.Prisma.PayrollCycleScalarFieldEnum = {
  id: 'id',
  fromDate: 'fromDate',
  toDate: 'toDate',
  addedDate: 'addedDate',
  processed: 'processed',
  processing: 'processing',
  failed: 'failed',
  failedReport: 'failedReport',
  processedDate: 'processedDate',
  success: 'success'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  monthYear: 'monthYear',
  userId: 'userId',
  totalLates: 'totalLates',
  toBeDeductedFromLeaveCredits: 'toBeDeductedFromLeaveCredits',
  file: 'file',
  addedDate: 'addedDate',
  isDeleted: 'isDeleted',
  manualCorrection: 'manualCorrection',
  modifiedById: 'modifiedById',
  modifiedDate: 'modifiedDate',
  note: 'note',
  otherAmount: 'otherAmount',
  paid: 'paid',
  paidDate: 'paidDate',
  payrollCycleId: 'payrollCycleId',
  salaryAmount: 'salaryAmount',
  salaryId: 'salaryId',
  toBeDeductedFromCurrentSalary: 'toBeDeductedFromCurrentSalary',
  totalAbsences: 'totalAbsences',
  totalDaysWorked: 'totalDaysWorked',
  totalDeduction: 'totalDeduction',
  totalIncompletes: 'totalIncompletes',
  totalReceivable: 'totalReceivable',
  totalWorkingDays: 'totalWorkingDays',
  processing: 'processing',
  totalDays: 'totalDays'
};

exports.Prisma.PayrollDeductionScalarFieldEnum = {
  id: 'id',
  payrollId: 'payrollId',
  installmentId: 'installmentId',
  title: 'title',
  amount: 'amount'
};

exports.Prisma.DashboardElementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  isPublished: 'isPublished',
  isDeleted: 'isDeleted'
};

exports.Prisma.RoleDashboardElementScalarFieldEnum = {
  roleId: 'roleId',
  dashboardElementId: 'dashboardElementId',
  order: 'order'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountCode: 'accountCode',
  xeroReference: 'xeroReference',
  title: 'title',
  xeroType: 'xeroType',
  description: 'description',
  bankAccountNumber: 'bankAccountNumber',
  showInExpenseClaims: 'showInExpenseClaims',
  xeroTenantId: 'xeroTenantId'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  taxType: 'taxType',
  title: 'title',
  rate: 'rate',
  xeroTenantId: 'xeroTenantId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  xeroReference: 'xeroReference',
  productCode: 'productCode',
  title: 'title',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  accountId: 'accountId',
  taxRateId: 'taxRateId'
};

exports.Prisma.BrandingThemeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  paymentTerms: 'paymentTerms'
};

exports.Prisma.WorkingHoursScalarFieldEnum = {
  id: 'id',
  title: 'title',
  hours: 'hours',
  addedDate: 'addedDate'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TokenTypes = exports.$Enums.TokenTypes = {
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  signuptoken: 'signuptoken',
  emailSignupToken: 'emailSignupToken',
  phoneSignupToken: 'phoneSignupToken',
  resetPasswordToken: 'resetPasswordToken',
  changeUserPhoneEmailToken: 'changeUserPhoneEmailToken'
};

exports.ModulesVisibility = exports.$Enums.ModulesVisibility = {
  organization: 'organization',
  system: 'system'
};

exports.SMSType = exports.$Enums.SMSType = {
  T: 'T',
  P: 'P'
};

exports.SavedSearchesVisibility = exports.$Enums.SavedSearchesVisibility = {
  self: 'self',
  global: 'global',
  organization: 'organization'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  broadcast: 'broadcast',
  user: 'user',
  department: 'department'
};

exports.NotificationMode = exports.$Enums.NotificationMode = {
  auto: 'auto',
  manual: 'manual'
};

exports.FileVisibility = exports.$Enums.FileVisibility = {
  public: 'public',
  organization: 'organization',
  self: 'self',
  client: 'client'
};

exports.ThresholdType = exports.$Enums.ThresholdType = {
  monthly: 'monthly',
  yearly: 'yearly'
};

exports.BiometricsChecksType = exports.$Enums.BiometricsChecksType = {
  in: 'in',
  out: 'out'
};

exports.Prisma.ModelName = {
  Country: 'Country',
  Role: 'Role',
  Organization: 'Organization',
  Client: 'Client',
  ClientXeroConnection: 'ClientXeroConnection',
  User: 'User',
  UserRole: 'UserRole',
  UserMeta: 'UserMeta',
  UserDocument: 'UserDocument',
  AuthTokens: 'AuthTokens',
  Modules: 'Modules',
  Permissions: 'Permissions',
  RolePermissions: 'RolePermissions',
  StaticPageSEO: 'StaticPageSEO',
  SystemLogs: 'SystemLogs',
  FaqsCategory: 'FaqsCategory',
  Faqs: 'Faqs',
  FaqsMedia: 'FaqsMedia',
  SitePages: 'SitePages',
  PagesSection: 'PagesSection',
  PageSectionRelation: 'PageSectionRelation',
  PagesContent: 'PagesContent',
  BlogsCategory: 'BlogsCategory',
  Blogs: 'Blogs',
  BlogImages: 'BlogImages',
  MailSentLogs: 'MailSentLogs',
  OtpCodes: 'OtpCodes',
  emailLookupsLog: 'emailLookupsLog',
  AlertsType: 'AlertsType',
  UserAlertsSetting: 'UserAlertsSetting',
  SmsConfiguration: 'SmsConfiguration',
  SmsLogs: 'SmsLogs',
  PaymentGateway: 'PaymentGateway',
  SavedSearches: 'SavedSearches',
  Notification: 'Notification',
  Subscribers: 'Subscribers',
  Authorities: 'Authorities',
  ProjectComponent: 'ProjectComponent',
  ProjectType: 'ProjectType',
  ProjectState: 'ProjectState',
  ProjectEnableStates: 'ProjectEnableStates',
  Project: 'Project',
  ProjectMembers: 'ProjectMembers',
  ProjectClient: 'ProjectClient',
  FileManagement: 'FileManagement',
  FileshareLogs: 'FileshareLogs',
  ProjectConversation: 'ProjectConversation',
  ProjectConversationReadLog: 'ProjectConversationReadLog',
  Task: 'Task',
  TaskMembers: 'TaskMembers',
  DailyRoutine: 'DailyRoutine',
  Department: 'Department',
  OrganizationDepartmentRelation: 'OrganizationDepartmentRelation',
  Enquiry: 'Enquiry',
  EnquiryAttachment: 'EnquiryAttachment',
  LeadEnquiryFollowUp: 'LeadEnquiryFollowUp',
  Leads: 'Leads',
  Quotation: 'Quotation',
  QuotationMilestone: 'QuotationMilestone',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  InvoiceFollowUp: 'InvoiceFollowUp',
  Transactions: 'Transactions',
  Permit: 'Permit',
  Reimbursement: 'Reimbursement',
  ReimbursementReceipt: 'ReimbursementReceipt',
  LeaveType: 'LeaveType',
  LeaveCredits: 'LeaveCredits',
  LeaveRequest: 'LeaveRequest',
  CashAdvanceRequest: 'CashAdvanceRequest',
  CashAdvanceInstallment: 'CashAdvanceInstallment',
  CarReservationRequest: 'CarReservationRequest',
  CompanyAsset: 'CompanyAsset',
  AssetAllocation: 'AssetAllocation',
  RequestAttachment: 'RequestAttachment',
  AdminAction: 'AdminAction',
  BulkUploadFormat: 'BulkUploadFormat',
  BiometricsJob: 'BiometricsJob',
  BiometricsChecks: 'BiometricsChecks',
  PublicHoliday: 'PublicHoliday',
  Attendance: 'Attendance',
  Feedback: 'Feedback',
  FeedbackFiles: 'FeedbackFiles',
  Salary: 'Salary',
  PayrollCycle: 'PayrollCycle',
  Payroll: 'Payroll',
  PayrollDeduction: 'PayrollDeduction',
  DashboardElement: 'DashboardElement',
  RoleDashboardElement: 'RoleDashboardElement',
  Account: 'Account',
  TaxRate: 'TaxRate',
  Product: 'Product',
  BrandingTheme: 'BrandingTheme',
  WorkingHours: 'WorkingHours'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
